import numpy as np
import random
from manim import *

class matriz_2(Scene):
  def construct(self):

    ecn1 = MathTex("1", "x", "+", "1", "y", "+", "1", "z", "=", "2")
    ecn2 = MathTex("-3", "x", "-", "2", "y", "-", "1", "z", "=", "4")
    ecn3 = MathTex("-2", "x", "+", "1", "y", "+", "2", "z", "=", "2")

    arreglo_ecuaciones = [ecn1, ecn2, ecn3]

    ecuaciones = MobjectMatrix(
    [[ecn1], [ecn2], [ecn3]],
    left_bracket="\\{",
    right_bracket="\\}")

    for ecn in arreglo_ecuaciones:
        ecn.set_color_by_tex_to_color_map({
        "x": RED,
        "y": GREEN,
        "z": BLUE,
    })
    self.play(FadeIn(ecuaciones))
    self.wait(2)

    matriz_de_coeficientes = Matrix(
      [("1", "1", "1", "2"), ("-3", "-2", "-1", "4"), ("-2", "1", "2", "2")])
    separador1 = Line(RIGHT*1.5 + UP*1.1, RIGHT*1.5 + DOWN*1.1, color=YELLOW)


    grupo_matriz_coeficientes = VGroup(matriz_de_coeficientes, separador1)
    self.play(ecuaciones.animate.scale(1).move_to(LEFT*3.5),
              grupo_matriz_coeficientes.animate.scale(1).move_to(RIGHT*3.5))

    self.play(ecuaciones.animate.scale(1).move_to(LEFT*3.5+UP*2),
              grupo_matriz_coeficientes.animate.scale(1).move_to(RIGHT*3.5+UP*2))
    self.wait()
    entext0 = Text("Sistema de").move_to(LEFT*3.5)
    entext1 = Text("Ecuaciones").move_to(LEFT*3.5 + DOWN*0.6)

    mtext0 = Text("Matriz de").move_to(RIGHT*3.5)
    mtext1 = Text("Coeficientes").move_to(RIGHT*3.5+ DOWN*0.6)
    self.play(FadeIn(entext0.scale(0.8), entext1.scale(0.8),
                     mtext0.scale(0.8), mtext1.scale(0.8)))
    self.wait(2)
    self.play(FadeOut(entext0, entext1, mtext0, mtext1))

    ttext0 = Text("Ahora, haremos 0 los").move_to(LEFT*3 + DOWN*0.8)
    ttext1 = Text("números del triángulo :)").move_to(LEFT*3 + DOWN*1.5)


    #Triangulo
    A = np.array([1.1, 0.9, 0])
    B = np.array([1.1, 2.8, 0])
    C = np.array([3.8, 0.9, 0])

    triangulo = Polygon(A, B, C)

    p1 = Dot(np.array([2.3, 0.5, 0]))
    p2 = Dot(np.array([0.8, -1, 0]))
    line = Arrow(p1,p2,buff=0)
    #line.shift(UP * 0.4)
    self.play(FadeIn(triangulo, ttext0.scale(0.8), ttext1.scale(0.8)), Create(line))
    self.wait(3)
    comienzo0 = Text("¡Vamos a iniciar con las").move_to(DOWN*0.8)
    comienzo1 = Text("operaciones elementales!").move_to(DOWN*1.7)

    grupo_triangulo = VGroup(matriz_de_coeficientes, triangulo, separador1)

    self.play(FadeOut(ttext0, ttext1, line, ecuaciones),
              grupo_triangulo.animate.scale(1.2).move_to(UP*2))
    self.play(FadeIn(comienzo0, comienzo1))
    self.wait(2)
    tit_esc = Text("MATRIZ ESCALONADA").move_to(np.array([3.5, 3.5, 0]))
    matriz_de_coeficientes_escalonada = Matrix(
      [("1", "1", "1", "2"),
       ("-3", "-2", "-1", "4"),
        ("-2", "1", "2", "2")])
    separador2 = Line(RIGHT*1.5 + UP*1.1, RIGHT*1.5 + DOWN*1.1, color=YELLOW)
    grupo_matriz_escalonada_coeficientes = VGroup(matriz_de_coeficientes_escalonada,
                                                  separador2)
    grupo_matriz_escalonada_coeficientes.move_to(UP*2)

    self.play(FadeOut(comienzo0, comienzo1),
              grupo_triangulo.animate.scale(0.8).move_to(LEFT*3.5+UP*2),
              FadeIn(tit_esc.scale(0.5)),
              grupo_matriz_escalonada_coeficientes.animate.scale(0.9).move_to(RIGHT*3.5+UP*2))
    self.wait(2)

    # Operaciones elementales #1
    matriz_de_coeficientes_op1 = Matrix(
      [("1", "1", "1", "2"),
       ("-3", "-2", "-1", "4"),
        ("-2", "1", "2", "2")])
    separador3 = Line(RIGHT*1.5 + UP*1.1, RIGHT*1.5 + DOWN*1.1, color=YELLOW)
    grupo_matriz_op1_coeficientes = VGroup(matriz_de_coeficientes_op1,
                                                  separador3)
    grupo_matriz_op1_coeficientes.move_to(np.array([0, -2, 0]))
    op1 = MathTex("F_{2} = F_{2} + (F_{1} \\cdot (3))").move_to(np.array([-4.9, -2, 0]))
    op1.set_color(DARK_BLUE)
    self.play(FadeIn(grupo_matriz_op1_coeficientes), Write(op1.scale(0.8)))

    # operacion 1

    matriz_0 = Matrix(
        [("1","1","1","2")])
    matriz_0.scale(0.8)
    ent0 = matriz_0.get_entries()
    ent0.move_to(RIGHT*5+DOWN*1.2)

    self.play(FadeIn(ent0))


    matriz_por_3 = Matrix(
      [("3", "3", "3", "6")])
    matriz_por_3.scale(0.8)
    ent00 = matriz_por_3.get_entries()
    ent00.move_to(RIGHT*5+DOWN*1.2)

    self.play(Transform(ent0, ent00))

    matriz_1 = Matrix(
        [("-3","-2","-1","4")])
    matriz_1.scale(0.8)
    ent1 = matriz_1.get_entries()
    ent1.move_to(RIGHT*4.9+DOWN*2)

    self.play(FadeIn(ent1))

    # linea de suma
    pn1 = Dot(np.array([3, -2.5, 0]))
    pn2 = Dot(np.array([7, -2.5, 0]))
    separador_suma = Line(pn1,pn2, color = BLUE)
    self.play(FadeIn(separador_suma))

    matriz_111 = Matrix(
        [("0","1","2","10")])
    matriz_111.scale(0.8)
    ent111 = matriz_111.get_entries()
    ent111.move_to(RIGHT*5+DOWN*2.8)

    matriz_11 = Matrix(
        [("0","1","2","10")])
    matriz_11.scale(0.8)
    ent11 = matriz_11.get_entries()
    ent11.move_to(RIGHT*5+DOWN*2.8)
    self.play(FadeIn(ent11, ent111))

    matriz_op1 = Matrix(
      [("1", "1", "1", "2"),
       ("0", "1", "2", "10"),
        ("-2", "1", "2", "2")])
    separador_op1 = Line(RIGHT*1.5 + UP*1.1, RIGHT*1.5 + DOWN*1.1, color=YELLOW)
    grupo_matriz_op1 = VGroup(matriz_op1, separador_op1)
    grupo_matriz_op1.move_to(DOWN*2)

    self.play(Transform(ent11, matriz_op1), Transform(matriz_de_coeficientes_op1, grupo_matriz_op1),
              FadeOut(grupo_matriz_op1_coeficientes))
    self.wait(2)


  # operaciones PT. II

    op2 = MathTex("F_{3} = F_{3} + (F_{1} \\cdot (2))").move_to(np.array([-4.9, -2, 0]))
    op2.set_color(DARK_BLUE)

    matriz_2= Matrix(
        [("1","1","1","2")])
    matriz_2.scale(0.8)
    ent2 = matriz_2.get_entries()
    ent2.move_to(RIGHT*5+DOWN*1.2)

    matriz_21= Matrix(
        [("2","2","2","4")])
    matriz_21.scale(0.8)
    ent21 = matriz_21.get_entries()
    ent21.move_to(RIGHT*5+DOWN*1.2)

    matriz_22 = Matrix(
        [("-2","1","2","2")])
    matriz_22.scale(0.8)
    ent22 = matriz_22.get_entries()
    ent22.move_to(RIGHT*4.9+DOWN*2)

    matriz_222 = Matrix(
        [("0","3","4","6")])
    matriz_222.scale(0.8)
    ent222 = matriz_222.get_entries()
    ent222.move_to(RIGHT*5+DOWN*2.8)

    matriz_221 = Matrix(
        [("0","3","4","6")])
    matriz_221.scale(0.8)
    ent221 = matriz_221.get_entries()
    ent221.move_to(RIGHT*5+DOWN*2.8)

    matriz_op11 = Matrix(
      [("1", "1", "1", "2"),
       ("0", "1", "2", "10"),
        ("-2", "1", "2", "2")])
    separador_op11 = Line(RIGHT*1.5 + UP*1.1, RIGHT*1.5 + DOWN*1.1, color=YELLOW)
    grupo_matriz_op11 = VGroup(matriz_op11, separador_op11)
    grupo_matriz_op11.move_to(DOWN*2)
    self.add(grupo_matriz_op11)

    matriz_op2 = Matrix(
      [("1", "1", "1", "2"),
       ("0", "1", "2", "10"),
        ("0", "3", "4", "6")])
    separador_op2 = Line(RIGHT*1.5 + UP*1.1, RIGHT*1.5 + DOWN*1.1, color=YELLOW)
    grupo_matriz_op2 = VGroup(matriz_op2, separador_op2)
    grupo_matriz_op2.move_to(DOWN*2)


    self.play(FadeOut(ent00, ent0, ent1, ent11, ent111))
    self.play(FadeOut(op1), Write(op2.scale(0.8)), FadeIn(ent2))
    self.play(Transform(ent2, ent21))
    self.play(FadeIn(ent22))
    self.play(FadeIn(ent222, ent221))
    self.wait()
    self.play(FadeOut(grupo_matriz_op11),Transform(ent221, grupo_matriz_op2))

    # operaciones PT. III
    op3 = MathTex("F_{3} = F_{3} + (F_{2} \\cdot (-3))").move_to(np.array([-4.9, -2, 0]))
    op3.set_color(DARK_BLUE)


    matriz_3= Matrix(
        [("0","1","2","10")])
    matriz_3.scale(0.8)
    ent3 = matriz_3.get_entries()
    ent3.move_to(RIGHT*5+DOWN*1.2)

    matriz_31= Matrix(
        [("0","-3","-6","-30")])
    matriz_31.scale(0.8)
    ent31 = matriz_31.get_entries()
    ent31.move_to(RIGHT*5+DOWN*1.2)

    matriz_33 = Matrix(
        [("0","3","4","6")])
    matriz_33.scale(0.8)
    ent33 = matriz_33.get_entries()
    ent33.move_to(RIGHT*4.9+DOWN*2)

    matriz_333 = Matrix(
        [("0","0","-2","-24")])
    matriz_333.scale(0.8)
    ent333 = matriz_333.get_entries()
    ent333.move_to(RIGHT*5+DOWN*2.8)

    matriz_331 = Matrix(
        [("0","0","-2","-24")])
    matriz_331.scale(0.8)
    ent331 = matriz_331.get_entries()
    ent331.move_to(RIGHT*5+DOWN*2.8)

    matriz_op22 = Matrix(
      [("1", "1", "1", "2"),
       ("0", "1", "2", "10"),
        ("0", "3", "4", "6")])
    separador_op22 = Line(RIGHT*1.5 + UP*1.1, RIGHT*1.5 + DOWN*1.1, color=YELLOW)
    grupo_matriz_op22 = VGroup(matriz_op22, separador_op22)
    grupo_matriz_op22.move_to(DOWN*2)
    self.add(grupo_matriz_op22)

    matriz_op2 = Matrix(
      [("1", "1", "1", "2"),
       ("0", "1", "2", "10"),
        ("0", "0", "-2", "-24")])
    separador_op2 = Line(RIGHT*1.1 + UP*1.1, RIGHT*1.1 + DOWN*1.1, color=YELLOW)
    grupo_matriz_op2 = VGroup(matriz_op2, separador_op2)
    grupo_matriz_op2.move_to(DOWN*2)

    self.play(FadeOut(ent2, ent21, ent22, ent222, ent221))
    self.play(FadeOut(op2), Write(op3.scale(0.8)), FadeIn(ent3))
    self.play(Transform(ent3, ent31))
    self.play(FadeIn(ent33))
    self.play(FadeIn(ent333, ent331))
    self.wait()
    self.play(FadeOut(grupo_matriz_op22),Transform(ent331, matriz_op2))
    self.wait(2)

    # transformar matriz escalonada 
    matriz_trans = Matrix(
      [("1", "1", "1", "2"),
       ("0", "1", "2", "10"),
        ("0", "0", "-2", "-24")])
    separador_trans = Line(RIGHT*1.1 + UP*1.1, RIGHT*1.1 + DOWN*1.1, color=YELLOW)
    grupo_matriz_trans = VGroup(matriz_trans, separador_trans)
    grupo_matriz_trans.move_to(UP*2+RIGHT*3.5)
    self.play(Transform(grupo_matriz_op2, grupo_matriz_trans), FadeOut(grupo_matriz_escalonada_coeficientes))
    self.play(FadeOut(op3,ent3, ent31, ent33, ent333, ent331, separador_suma))
    self.add(grupo_matriz_trans)

    #reemplazo hacia atras
    operaciones = Text("¡Operemos!").move_to(np.array([0, -1.5, 0]))
    self.play(Write(operaciones))
    self.wait()
    self.play(FadeOut(operaciones))
    ecnxyz = MathTex("x", "+" "y", "+", "z", "=", "2")
    ecnyz = MathTex("y", "+", "2", "z", "=", "10")
    ecnz = MathTex("-", "2", "z", "=", "-24")

    arreglo_ecuaciones_final = [ecnxyz, ecnyz, ecnz]

    ecuaciones_final = MobjectMatrix(
    [[ecnxyz], [ecnyz], [ecnz]],
    left_bracket="\\{",
    right_bracket="\\}").move_to(DOWN*1.5+RIGHT*3.5)

    for eqn in arreglo_ecuaciones_final:
        eqn.set_color_by_tex_to_color_map({
        "x": RED,
        "y": GREEN,
        "z": BLUE,
    })
    self.play(FadeIn(ecuaciones_final))
    self.play(ecuaciones_final.animate.move_to(LEFT*3.5+DOWN*1.5))

    # operaciones

    p1 = MathTex("-2z = -24").move_to(np.array([2, -0.5, 0]))
    p01 = MathTex("2z = 24").move_to(np.array([2, -1.3, 0]))
    p001 = MathTex("z = \\frac{24}{2}").move_to(np.array([2, -2.3, 0]))
    p0001 = MathTex("z = 12").move_to(np.array([2, -3.1, 0]))
    self.play(FadeIn(p1, p01, p001, p0001))
    self.wait(2)
    self.play(FadeOut(p1, p01, p001))
    self.play(p0001.animate.move_to(RIGHT*5.5+DOWN*3))
    p2 = MathTex("y+2z = 10").move_to(np.array([2, -0.5, 0]))
    p02 = MathTex("y+2(12) = 10").move_to(np.array([2, -1.3, 0]))
    p002 = MathTex("y+24 = 10").move_to(np.array([2, -2.1, 0]))
    p0002 = MathTex("y = -14").move_to(np.array([2, -2.9, 0]))
    self.play(FadeIn(p2, p02, p002, p0002))
    self.wait(2)
    self.play(FadeOut(p2, p02, p002))
    self.play(p0002.animate.move_to(RIGHT*5.5+DOWN*2))


    p3 = MathTex("x+y+z=2").move_to(np.array([2, -0.5, 0]))
    p03 = MathTex("x+(-14)+(12)=2").move_to(np.array([2, -1.3, 0]))
    p003 = MathTex("x -2 = 2").move_to(np.array([2, -2.1, 0]))
    p0003 = MathTex("x = 4").move_to(np.array([2, -2.9, 0]))
    self.play(FadeIn(p3, p03, p003, p0003))
    self.wait(2)
    self.play(FadeOut(p3, p03, p003))
    self.play(p0003.animate.move_to(RIGHT*5.5+DOWN))

    self.play(p0001.animate.move_to(RIGHT*1.5+DOWN*3), p0002.animate.move_to(RIGHT*1.5+DOWN*2), p0003.animate.move_to(RIGHT*1.5+DOWN))
    solucion = Text("SOLUCIÓN:").move_to(np.array([1.5, -0.2, 0]))
    solucion.scale(0.8)

    solucion.set_color(GREEN)
    self.play(FadeIn(solucion))
    self.wait(3)
    self.clear()
